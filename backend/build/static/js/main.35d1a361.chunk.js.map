{"version":3,"sources":["scripts/playerCounter.js","scripts/story.js","scripts/stage/entry.js","scripts/leave.js","scripts/matching.js","scripts/stage/room.js","scripts/stage/start.js","scripts/card.js","scripts/stage/hand_selection.js","scripts/stage/modal/story_modal.js","scripts/stage/field_selection.js","scripts/stage/modal/show_answer.js","scripts/stage/show_role.js","scripts/stage/modal/result.js","scripts/player_name.js","scripts/stage/show_score.js","scripts/status.js","scripts/player_list.js","scripts/stock.js","scripts/discard.js","scripts/player_delete.js","scripts/stop.js","App.js","serviceWorker.js","index.js"],"names":["PlayerCounter","props","useState","player_num","setPlayerNum","useEffect","socket","on","data","num","id","Story","showStory","setShowStory","style","display","className","story","REGEX","Entry","useForm","register","handleSubmit","reset","show","setShow","useCookies","setCookie","userAlert","setUserAlert","comeback","name","setName","player","path","initializeName","onSubmit","event","username","length","match","emit","preventDefault","setMessage","htmlFor","type","ref","placeholder","required","Audio","volume","Leave","showLeave","setShowLeave","onClick","console","log","handle","Matching","showMatching","setShowMatching","game","stage","disabled","role","aria-hidden","Room","showRoom","setShowRoom","showRoomContent","setShowRoomContent","roomList","setRoomList","showRoomCreate","setShowRoomCreate","showRoomList","setShowRoomList","showStart","setShowStart","option","setOption","showOverlap","setShowOverlap","updateRoomList","roomManager","filter","room","stageIndex","players","map","index","key","roomname","setShowStatus","others","isMaster","socketId","class","value","checked","Start","startMsg","round","game_start","onAnimationEnd","Card","kind","isField","isAnswer","button","radio","HandSelection","showhand","setShowHand","hand_buttons","setHandButtons","hand_selection","hand","_array","card","id_btn","id_img","hand_src","filename","handButton","master_select","data-toggle","data-target","src","alt","setMasterIndex","story_selection","selectedSrc","setSrc","others_select","$","removeClass","addClass","card_x","offset","left","field_x","card_y","top","field_y","document","getElementsByClassName","animate","transform","opacity","duration","setTimeout","update_hand","slice","discard","draw_card","others_hand_selection","StoryModal","showErrMsg","setShowErrMsg","setStory","masterIndex","move_y","height","tabIndex","aria-labelledby","data-dismiss","aria-label","modal","form","FieldSelection","showfield","setShowField","showButton","setShowButton","field_buttons","setFieldButtons","showfieldWrapper","setShowfieldWrapper","selected","others_field_select","getElementById","update_field_with_back","field","cards","field_src","tailfilename","fieldButton","fieldRadio","field_selection","playerColors","ShowAnswer","message","scoreDiffs","setScoreDiffs","fieldCards","setFieldCards","selectedNames","setSelectedNames","ownerNames","setOwnerNames","maxHeight","setMaxHeight","iconStyle","sort","a","b","score","id_score_diff","indexOf","prescore","icon","faLongArrowAltRight","id_lst","indexplayer","eachName","Math","max","masterCardIndex","names","answers","element","cardIndex","some","state","open_modal","is","handleclick","ShowRole","showrole","setShowRole","setIsMaster","show_role","textAlign","padding","rank","rank_suffix","Result","result","setResult","useRef","rank_index","pre_score","id_result","faMedal","show_result","colSpan","PlayerName","ShowScore","setScore","show_score","Status","showStatus","PlayerList","showPlayerList","setShowPlayerList","playerList","setPlayerList","updatePlayerList","faChessRook","faChessPawn","Stock","stock","setStock","showStock","setShowStock","stock_animate","rotate","random","shiftX","shiftY","stockButton","len","display_stock","stock_x","Array","from","forEach","stock_update","Discard","setDiscard","showDiscard","setShowDiscard","show_discard","discardButton","discard_x","getBoundingClientRect","animation","update_discard","PlayerDelete","showDelete","setShowDelete","deleteMsg","setDeleteMsg","deletedPlayer","displayDelete","Stop","showStop","setShowStop","stopMsg","setStopMsg","stopped","io","query","cookie","transports","upgrade","timeout","tooltip","error","withCookies","Boolean","window","location","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.35d1a361.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\n\n/**\n * 現在サイト内でプレイしている全員の人数表示\n * @param {{ socket: SocketIO.Socket }} props 連想配列として，socketをもつ\n */\nexport default function PlayerCounter(props) {\n    /** 現在のプレイヤー人数 */\n    const [player_num, setPlayerNum] = useState(0);\n\n    useEffect(() => {\n        // socketのイベントハンドラ登録一覧\n        props.socket.on('update_number_of_player', (data) => setPlayerNum(data.num)); // 人数表示更新\n\n    }, [ props.socket ]);\n\n    return (\n        <div id=\"numOfPeople\">現在のプレイヤー人数：{ player_num }人</div>\n    );\n}","import React, { useEffect, useState } from 'react';\nimport '../css/story.css';\n\n/**\n * お題の表示\n * @param {{ socket: SocketIOClient.Socket }} props 連想配列として，socketをもつ\n */\nexport default function Story(props) {\n    /** お題の表示 */\n    const [showStory, setShowStory] = useState(false);\n\n    useEffect(() => {\n        // socketのイベントハンドラ登録一覧\n        props.socket.on('in_room', () => setShowStory(false));\n        props.socket.on('hand_selection', () => setShowStory(false));\n        props.socket.on('others_hand_selection', () => setShowStory(true));\n        props.socket.on('field_selection', () =>  setShowStory(true));\n        props.socket.on('show_answer', () =>  setShowStory(true));\n        props.socket.on('result', () => setShowStory(false));\n\n    }, [ props.socket ]);\n\n    return (\n        <div id=\"story\" style={ {display: showStory ? 'block' : 'none'} }>\n            <div className='story-title'>The Story</div>\n            <p>{ props.story }</p>\n        </div>\n    );\n}","import React, { useState, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useCookies } from 'react-cookie';\nimport '../../css/entry.css';\n\n/** 空白のみの正規表現 */\nconst REGEX = /( |　)+/g;\n/** ボタンの効果音 */\nconst audio = new Audio('../audio/decision29low.wav');\n/** ボタンの効果音の音量 */\naudio.volume = 0.1;\n\n/**\n * エントリーの表示とクッキーのセット\n * @param {{ sokcet: SocketIO.Socket, setMessage: (message: string) => void, setName: (name: string) => void }} props 連想配列として，socket, setMassage, setNameをもつ\n */\nexport default function Entry(props) {\n    /** エントリーフォーム */\n    const { register, handleSubmit, reset } = useForm();\n    /** エントリーフォームの表示 */\n    const [show, setShow] = useState(true);\n    /** cookieの設定 */\n    const [, setCookie] = useCookies(['client-id']);\n    /** ユーザー入力エラー */\n    const [ userAlert , setUserAlert] = useState(\"\");\n\n    useEffect(() => {\n        /**\n         * 復帰時の操作\n         * @param {string} name プレイヤー名\n         */\n        const comeback = (name) => {\n            setShow(false);\n            props.setName(name);\n        };\n        /**\n         * プレイヤー名の初期化\n         * @param {{ player: Player }} data 連想配列として，playerをもつ\n         */\n        const initializeName = (data) => {\n            setUserAlert(\"\");\n            setShow(false);\n            if (typeof data.player !== 'undefined') {\n                setCookie('client-id', data.player.name, {path: '/'});\n                props.setName(data.player.name);\n            }\n        };\n\n        /** サーバーからのemitを受け取るイベントハンドラ登録一覧 */\n        props.socket.on('room', (data) => initializeName(data));\n        props.socket.on('in_room', (data) => comeback(data.player.name));\n        props.socket.on('hand_selection', (data) => comeback(data.player.name));\n        props.socket.on('others_hand_selection', (data) => comeback(data.player.name));\n        props.socket.on('field_selection', (data) => comeback(data.player.name));\n        props.socket.on('show_answer', (data) => comeback(data.player.name));\n        props.socket.on('result', (data) => comeback(data.player.name));\n        props.socket.on('username_duplication', () => setUserAlert(\"The username is already in use\"));\n\n    }, [ props.socket ]);\n\n    /**\n     * エントリーフォーム入力時の動作\n     * @param {{ username: string }} data 連想配列として，usernameをもつ\n     * @param {Event} event イベント\n     */\n    const onSubmit = (data, event) => {\n        if (data.username.length > 8) { // 9文字以上の場合\n            setUserAlert(\"Username is too long (8 characters or less)\");\n            reset();\n            return;\n        } else if (data.username.match(REGEX) != null) { // 0文字の場合\n            setUserAlert(\"Blank-only names are invalid\");\n            reset();\n            return;\n        }\n        // audio.play();\n        props.socket.emit('entry', { username : data.username }); // サーバーに'entry'を送信\n        event.preventDefault(); // フォームによる/?への接続を止める(socketIDを一意に保つため)\n        reset();\n        props.setMessage('他のプレイヤーが参加するのを待っています( ´ ▽ ` )');\n    };\n\n    return (\n        <div className=\"entry-wrapper\" style={ { display: show ? 'block' : 'none' } }>\n            <div className=\"entry-content\">\n                <div className=\"welcome-word\">Please pick an username.</div>\n                <form className=\"form-inline\" id=\"entryForm\" onSubmit={ handleSubmit(onSubmit) }>\n                    <label className=\"sr-only\" htmlFor=\"inlineFormInputName2\">Name</label>\n                    <input type=\"text\" className=\"form-control mb-2 mr-sm-2\" name=\"username\" ref={ register() } placeholder=\"I want to be called\" required/>\n                    <button type=\"submit\" className=\"btn btn-primary mb-2\">Start playing</button>\n                    <div className=\"overlap\" id=\"username-alert\">{ userAlert }</div>\n                </form>\n            </div>\n        </div>\n    );\n}","\nimport React, { useState, useEffect } from 'react';\nimport '../css/upload.css';\n\n/**\n * 退室ボタンの表示\n * @param {{ socket: SocketIO.Socket }} props 連想配列として，socketをもつ\n */\nexport default function Leave(props) {\n    /** 退室ボタンの表示 */\n    const [showLeave, setShowLeave] = useState(false);\n    /** 退室ボタンのクラス名 */\n    const className = `btn btn-warning mb-2 ${ props.className }`;\n\n    useEffect(() => {\n        // socketのイベントハンドラ登録一覧\n        props.socket.on('room', () => setShowLeave(false));\n        props.socket.on('in_room', () => setShowLeave(true));\n        props.socket.on('entry_player', () => setShowLeave(true));\n        props.socket.on('show_start', () => setShowLeave(true));\n        props.socket.on('hand_selection', () => setShowLeave(false));\n        props.socket.on('result', () => setShowLeave(true));\n        props.socket.on('restart', () => setShowLeave(true));\n\n    }, [ props.socket ]);\n\n    const handleleave = () => {\n        console.log(\"leave\");\n        if(typeof props.handle !== 'undefined') {\n            props.handle();\n        }\n        props.socket.emit('leave');\n    }\n\n    return (\n        <button onClick={ handleleave } id=\"leave-room-button\" style={ { display: showLeave ? 'block' : 'none' } } className={ className } >\n           Leave\n        </button>\n    );\n}","import React, { useState, useEffect } from 'react';\n\n/**\n * マッチング中のスピナー表示<br>\n * 画面下の方に表示される\n * @param {{ socket: SocketIO.Socket }} props 連想配列として，socketをもつ\n */\nexport default function Matching(props) {\n\n    /** マッチングの表示 */\n    const [showMatching, setShowMatching] = useState(false);\n\n    useEffect(() => {\n        // socketのイベントハンドラ登録一覧\n        props.socket.on('update_player_list', (data) => {\n            if (data.game.stage === 'in_room') {\n                setShowMatching(true);\n            }\n        });\n        props.socket.on('room', () => setShowMatching(false));\n        props.socket.on('in_room', () => setShowMatching(true));\n        props.socket.on('hand_selection', () => setShowMatching(false));\n\n    }, [ props.socket ]);\n\n    return (\n        <div className=\"text-center matching\" style={ { display: showMatching ? 'block' : 'none' } }>\n            <button className=\"btn btn-primary\" type=\"button\" disabled>\n            Please wait...  <span className=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\n               \n            </button>\n        </div>\n    );\n}","import React, { useState, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport Leave from '../leave';\nimport '../../css/room.css';\nimport Matching from '../matching';\n\n/** ボタンの効果音 */\nconst audio = new Audio('../audio/decision29low.wav');\n/** ボタンの効果音の音量 */\naudio.volume = 0.1;\n\n/**\n * ルームの選択，リスト，作成フォーム，スタートボタンの表示\n * @param {{ socket: SocketIO.Socket, setMassage: (message: string) => void, setShowStatus: (showStatus: boolean) => void }} props 連想配列として，socket, setAMassage, setShowStatusをもつ\n */\nexport default function Room(props) {\n    /** ルーム名のフォーム */\n    const { register, handleSubmit, reset } = useForm();\n    /** ルーム全体の表示 */\n    const [showRoom, setShowRoom] = useState(false);\n    /** ルームの選択画面表示 */\n    const [showRoomContent, setShowRoomContent] = useState(true);\n    /** ルームリストの内容 */\n    const [roomList, setRoomList] = useState(null);\n    /** ルーム作成画面表示 */\n    const [showRoomCreate, setShowRoomCreate] = useState(false);\n    /** ルームリストの表示 */\n    const [showRoomList, setShowRoomList] = useState(true);\n    /** スタートボタンの表示 */\n    const [showStart, setShowStart] = useState(false);\n    /** デッキのオプション */\n    const [option, setOption] = useState(false);\n    /** ルーム名の被り */\n    const [showOverlap, setShowOverlap] = useState(false);\n\n    /**\n     * ルームに入室したときのハンドラ\n     * @param {string} roomname ルーム名\n     */\n    const roomEntrySubmit = (roomname) => {\n        // audio.play();\n        setShowRoomContent(false);\n        props.setShowStatus(true);\n        props.socket.emit('room_entry', { roomname : roomname });\n        props.setMessage('他のプレイヤーが参加するのを待っています( ´ ▽ ` )');\n    }\n    /**\n     * ルーム作成フォームの登録ハンドラ\n     * @param {{ username: string, roomname: string }} data 連想配列として，username, roomnameをもつ\n     * @param {Event} event イベント\n     */\n    const roomCreateSubmit = (data, event) => {\n        // audio.play();\n        setShowRoomContent(false);\n        props.setShowStatus(true);\n        props.socket.emit('room_create', { username : data.username, roomname : data.roomname });\n        reset();\n        event.preventDefault(); // フォームによる/?への接続を止める(socketIDを一意に保つため)\n        props.setMessage('他のプレイヤーが参加するのを待っています( ´ ▽ ` )');\n    };\n    /** ルーム作成ボタンをクリックしたときのハンドラ */\n    const clickRoomCreate = () => {\n        // audio.play();\n        setShowRoomList(false);\n        setShowRoomCreate(true);\n    };\n    /** ルームリスト表示をクリックしたときのハンドラ */\n    const clickRoomList = () => {\n        // audio.play();\n        setShowRoomCreate(false);\n        setShowRoomList(true);\n    };\n    /** スタートボタンを押したときのハンドラ */\n    const clickStart = () => {\n        // audio.play();\n        props.socket.emit('start', { option : option });\n        setShowStart(false);\n    };\n\n    useEffect(() => {\n        /**\n         * ルームリストの更新\n         * @param {RoomManager} roomManager ルームマネージャー\n         */\n        const updateRoomList = (roomManager) => {\n            //number of players\n            if (roomManager.roomList.length === 0 || roomManager.roomList.filter(room => room.game.stageIndex === 0 && room.game.players.length < 30).length === 0) {\n                setRoomList(\n                    <div className=\"white\">No games at the moment</div>\n                );\n            } else {\n                setRoomList(\n                    //number of players\n                    roomManager.roomList.filter(room => room.game.stageIndex === 0 && room.game.players.length < 30).map((room, index) => {\n                        return(\n                            <div className=\"room-list-content\" key={ index }>\n                                <div className=\"room-name\">{ room.name }</div>\n                                <div className=\"room-decision-button\">\n                                    <button className=\"btn btn-primary mb-2\" onClick={ () => roomEntrySubmit(room.name)}>Join</button>\n                                </div>\n                            </div>\n                        );\n                    })\n                );\n            }\n        };\n\n        // socketのインベントハンドラ登録一覧\n        props.socket.on('room', (data) => {\n            updateRoomList(data.roomManager);\n            setShowRoomContent(true);\n            setShowRoom(true);\n            setShowStart(false);\n        });\n        props.socket.on('in_room', (data) => {\n            setShowRoomContent(false);\n            setShowRoom(true);\n            if (data.others.length >= 2 && data.player.isMaster) setShowStart(true);\n        });\n        // props.socket.on('room_create', () => setShowRoom(false));\n        props.socket.on('update_roomlist', (data) => updateRoomList(data.roomManager));\n        props.socket.on('entry_player', (data) => {\n            if (data.room.game.players.length >= 3 && data.room.game.players[0].socketId === props.socket.id) {\n                setShowRoom(true);\n                setShowRoomContent(false);\n                setShowStart(true);\n            }\n        });\n        props.socket.on('update_player_list', (data) => {\n            if (data.game.players.length < 3) {\n                setShowStart(false);\n            }\n        });\n        props.socket.on('restart', () => {\n            setShowRoomContent(false);\n            setShowRoomCreate(false);\n            setShowRoomList(false);\n            setShowRoom(true);\n        });\n        props.socket.on('room_name_overlap', () => {\n            setShowOverlap(true);\n            setShowRoomContent(true);\n            props.setShowStatus(false);\n        });\n\n    }, [ props.socket ]);\n\n    return (\n        <div className=\"room\" style={ { display: showRoom ? 'block' : 'none' } }>\n            <div className=\"room-content\" style={ { display: showRoomContent ? 'block' : 'none' } }>\n            <div class=\"container__home\">\n                <div className=\"main-home\">\n                    <h2>Home</h2>\n                    <p class=\"mb-0\">These are the games currently available:</p>\n                </div>\n           \n                <div className=\"room-button\">\n                    <button onClick={ clickRoomCreate } id=\"create-room-button\" className=\"btn btn-primary mb-2\">\n                     Create\n                    </button>\n                    {/* <button onClick={ clickRoomList } id=\"join-room-button\" className=\"btn btn-primary mb-2\">\n                        既存ルームに参加\n                    </button> */}\n                </div>\n                </div>\n                <div className=\"room-create\" style={ {display: showRoomCreate ? 'block' : 'none'} }>\n                    <div className=\"room-create-title\">Create a game</div>\n                    <form className=\"form-inline\" id=\"roomCreateForm\" onSubmit={ handleSubmit(roomCreateSubmit) }>\n                        <label className=\"sr-only\" htmlFor=\"inlineFormInputName2\">Name</label>\n                        <input type=\"text\" className=\"form-control mb-2 mr-sm-2\" name=\"roomname\" ref={ register() } placeholder=\"Name\"/>\n                        <button type=\"submit\" className=\"btn btn-primary mb-2\">Create</button>\n                    </form>\n                    <div className=\"overlap\" style={ { display: showOverlap ? 'block' : 'none' } }>このルーム名は既に使用されています<br/>（17文字目以上は切り捨てられます)</div>\n                </div>\n                <div className=\"room-list\" style={ { display: showRoomList ? 'block' : 'none' } }>\n                    { roomList }\n                </div>\n            </div> \n            <div className=\"game-start\" style={ { display: showStart ? 'block' : 'none' } }>\n                <div className=\"deck-select\">\n                    <input type=\"radio\" id=\"default\" name=\"deck\" value=\"default\" checked={ !option }/>\n                    <label className=\"deck-select-content\" onClick={() => setOption(false)} htmlFor='default'>\n                        Default Deck\n                    </label>\n                    <input type=\"radio\" id=\"option\" name=\"deck\" value=\"option\" checked={ option }/>\n                    <label className=\"deck-select-content\" onClick={ () => setOption(true) } htmlFor='option'>\n                        みんなの寄せ集め<br/>（みんなが投稿した　<br/>　画像でデッキを作成）\n                    </label>\n                </div>\n                <button onClick={ () => clickStart() } className=\"btn btn-primary mb-2\">\n                    Start the game\n                </button>\n            </div>\n            <Matching socket={ props.socket }/>\n            <Leave className=\"room-leave\" socket={ props.socket }/>\n        </div>\n    );\n}","\nimport React, { useEffect, useState } from 'react';\nimport '../../css/start.css';\n\n/**\n * スタートメッセージの表示\n * @param {{ socket: SocketIO.Socket }} props 連想配列として，socketをもつ\n */\nexport default function Start(props) {\n    /** スタートメッセージの表示 */\n    const [showStart, setShowStart] = useState(false);\n    /** スタートメッセージの内容 */\n    // const [startMsg, setStartMsg] = useState('Game Start');\n    const [startMsg, setStartMsg] = useState('');\n\n    useEffect(() => {\n        const game_start = (data) => {\n            console.log(data.game);\n            if(data.game.round === 1){\n                setShowStart(true);\n            }\n        };\n\n        /** socketのイベントハンドラ登録一覧 */\n        props.socket.on('hand_selection', (data) => game_start(data));\n\n    }, [ props.socket ]);\n\n    return (\n        <div className=\"startMsg\" onAnimationEnd={ () => setShowStart(false) } style={ { display: showStart ? 'block' : 'none' } }>{ startMsg }</div>\n    );\n}","import React from 'react';\nimport '../css/card.css';\n\n/**\n * カードの要素．この中にボタンがあり，ボタンの中に画像が埋め込まれている．\n * @param {{ radio: JSX.Element, button: JSX.Element, kind: string }} props 連想配列として，radio, button, kindをもつ\n */\nexport default function Card(props) {\n    /** カードの種類．HandかFieldか */\n    let className =  props.kind === 'answer' || props.kind === 'selected' ? `${ props.kind }Container` : `each${ props.kind }Container zoom-up-card`;\n    if (props.kind === 'answer' && props.isMaster) {\n        className += ' correctAnswer';\n    }\n\n    const isField = (props.kind === 'Field');\n    const isAnswer = (props.kind === 'answer');\n    const isDiscardOrStock = (props.kind === 'Discard' || props.kind === 'Stock');\n\n    const resultComponent = isDiscardOrStock ? (\n        <div className={ className } display='inline-flex' style={ props.style }>\n            { props.button }\n        </div>\n    ) : isField ? (\n        <div className={ className } display='inline-flex'>\n            { props.radio }\n            { props.button }\n        </div>\n    ) : isAnswer && props.isMaster ? (\n        <div className={ className } display='inline-flex'>\n            <div className=\"innnderAnswerContainer\">\n                { props.button }\n            </div>\n            <span></span>\n            <span></span>\n            <span></span>\n            <span></span>\n        </div>\n    ) : (\n        <div className={ className } display='inline-flex'>\n            { props.button }\n        </div>\n    );\n\n    return (\n        resultComponent\n    );\n}","// master_hand_selectionステージ\n\nimport React, { useEffect, useState } from 'react';\nimport $ from 'jquery';\nimport Card from '../card';\nimport '../../css/hand_selection.css';\n\n/** ボタンの効果音 */\nconst audio = new Audio(\"../audio/draw.mp3\");\n/** ボタンの効果音の音量 */\naudio.volume = 0.3;\n\n/**\n * 手札の表示\n * @param {{ socket: SocketIO.Socket, setMessage: (message: string) => void, setMasterIndex: (masterIndex: number) => void, setSrc: (src: JSX.Element) => void }} props 連想配列として，socket, setMassage, setMasterIndex, setSrcをもつ\n */\nexport default function HandSelection(props) {\n    /** 手札を表示するか否か */\n    const [showhand, setShowHand] = useState(false);\n    /** 手札の内容 */\n    const [hand_buttons, setHandButtons] = useState(null);\n\n    useEffect(() => {\n        /**\n         * 手札の表示(ドロー時)\n         * @param {{ game: Game, player: Player }} data 連想配列として，game, playerをもつ\n         */\n        const draw_card = (data) => {\n            setShowHand(true);\n            setHandButtons(\n                data.player.hand._array.slice(0, 5).map((card, index) => {\n                    const id_btn = `eachHandButton${ index }`;\n                    const id_img = `eachHandImage${ index }`;\n                    const hand_src = `../images/${ card.filename }`;\n                    const handButton = data.player.isMaster ? (\n                        <p className='eachHandButton' id={ id_btn } type='button' key={ index } onClick={ () => master_select(data, index) } data-toggle=\"modal\" data-target=\"#exampleModalCenter\">\n                            <img className='eachHandImage' id={ id_img } src={ hand_src } alt={ card.filename }></img>\n                        </p> \n                    ) : (\n                        <p className='eachHandButton' id={ id_btn } type='button' key={ index }>\n                            <img className='eachHandImage' id={ id_img } src={ hand_src } alt={ card.filename }></img>\n                        </p>\n                    );\n                    return(<Card button={ handButton } kind={ 'Hand' }/>);\n                })\n            );\n\n\n            setTimeout(() => {\n                hand_selection(data);\n            }, data.game.discard._array.length === 0 ? 3000 : 1000);\n        };\n\n        /**\n         * 手札の表示\n         * @param {{ game: Game, player: Player }} data 連想配列として，game, playerをもつ\n         */\n        const hand_selection = (data) => {\n\n            setHandButtons(\n                data.player.hand._array.map((card, index) => {\n                    const id_btn = `eachHandButton${ index }`;\n                    const id_img = `eachHandImage${ index }`;\n                    const hand_src = `../images/${ card.filename }`;\n                    const handButton = data.player.isMaster ? (\n                        <p className='eachHandButton' id={ id_btn } type='button' key={ index } onClick={ () => master_select(data, index) } data-toggle=\"modal\" data-target=\"#exampleModalCenter\">\n                            <img className='eachHandImage' id={ id_img } src={ hand_src } alt={ card.filename }></img>\n                        </p> \n                    ) : (\n                        <p className='eachHandButton' id={ id_btn } type='button' key={ index }>\n                            <img className='eachHandImage' id={ id_img } src={ hand_src } alt={ card.filename }></img>\n                        </p>\n                    );\n                    return(<Card button={ handButton } kind={ 'Hand' }/>);\n                })\n            );\n\n            if(data.player.isMaster){ //語り部の場合\n                props.setMessage('あなたは親です(ﾟ∀ﾟ)カードを選択してください(=^▽^)σ');\n            } else { // 語り部以外のプレイヤーの場合\n                props.setMessage('あなたは子です(ﾟ∀ﾟ)待機中( ´Д`)y━･~~');\n            }\n        };\n        /**\n         * 語り部が手札からカードを選択したときの動作\n         * @param {{ game: Game, player: Player }} data 連想配列として，game, playerをもつ\n         * @param {number} index 語り部が選んだカードの手札上のインデックス\n         */\n        const master_select = (data, index) => {\n            if(data.player.isMaster){\n                props.setMasterIndex(index);\n                story_selection(data, index);\n            }else{\n                //TODO:子の表示\n            }\n        };\n        /**\n         * 語り部が手札から選んだカードの表示と手札の非表示及びお題フォームの表示\n         * @param {{ game: Game, player: Player }} data 連想配列として，game, playerをもつ\n         * @param {number} index 語り部が選んだカードの手札上のインデックス\n         */\n        const story_selection = (data, index) => {\n            props.setMessage('あなたは親です(ﾟ∀ﾟ)カードのお題を入力してください⊂((・x・))⊃');\n            const selectedSrc = `../images/${ data.player.hand._array[index].filename }`;\n            props.setSrc(\n                <p className=\"selectedButton\" id=\"selected-hand-card-wrapper\" key={ index }>\n                    <img className=\"selectedImage\" src={ selectedSrc } alt=\"あなたが選んだカード\"/> \n                </p>\n            );\n        };\n        /**\n         * 語り部以外のプレイヤーの手札の表示\n         * @param {{ game: Game, player: Player }} data 連想配列として，game, playerをもつ\n         */\n        const others_hand_selection = (data) => {\n            setShowHand(true);\n            if (data.player.isMaster) {\n                props.setMessage('あなたは親です(ﾟ∀ﾟ)待機中( ´Д`)y━･~~');\n                update_hand(data.player);\n                props.socket.emit('wait');\n            } else {\n                props.setMessage('あなたは子です(ﾟ∀ﾟ)お題に沿ったカードを選択してください(=^▽^)σ');\n                setHandButtons(\n                    data.player.hand._array.map((card, index) => {\n                        const id_btn = `eachHandButton${ index }`;\n                        const id_img = `eachHandImage${ index }`;\n                        const hand_src = `../images/${ card.filename }`;\n                        const handButton = (\n                            <p className='eachHandButton' id={ id_btn } type='button' key={ index } onClick={ () => others_select(props.socket, data, index) }>\n                                <img className='eachHandImage' id={ id_img } src={ hand_src } alt={ card.filename }></img>\n                            </p>\n                        );\n                        return (<Card button={ handButton } kind={ 'Hand' }/>);\n                    })\n                );\n            }\n        };\n        /**\n         * 語り部以外のプレイヤーが手札からカードを選んだときの動作\n         * @param {SocketIO.Socket} socket socket\n         * @param {{ player: Player }} data 連想配列として，playerをもつ\n         * @param {number} index 選んだカードの手札上のインデックス\n         */\n        const others_select = (socket, data, index) => {\n            $(\".toField\").removeClass(\"toField\");\n            $(`#eachHandButton${ index }`).addClass(\"toField\");\n            const card_x = $(`#eachHandButton${ index }`).offset().left;\n            const field_x = ($(`#eachHandButton${ 2 }`).offset().left + $(`#eachHandButton${ 3 }`).offset().left) / 2;\n            const card_y = $(`#eachHandButton${ index }`).offset().top;\n            const field_y = $(\".eachFieldContainer\").offset().top;\n            document.getElementsByClassName(\"toField\")[0].animate([\n                // keyframes\n                { transform: 'translateY(0px)'}, \n                { transform: `translate(${ field_x - card_x }px, ${ field_y - card_y }px)`, opacity: 0 }\n              ], { \n                // timing options\n                duration: 800\n            });\n            props.setMessage('あなたは子です(ﾟ∀ﾟ)他の子の選択を待ちましょう( ´Д`)y━･~~');\n            const selectedSrc = `../images/${ data.player.hand._array[index].filename }`;\n            props.setSrc(\n                <p className=\"selected-handcard-wrapper\" id=\"selected-hand-card-wrapper\">\n                    <img id=\"selected-hand-card\" src={ selectedSrc } alt=\"あなたが選んだカード\"/> \n                </p>\n            );\n            // audio.play() // 再生\n            setTimeout(\n                () => socket.emit('others_hand_selection', { index : index }),\n                800\n            );\n\n            // 直後にカードを押せなくする\n            setHandButtons(\n                data.player.hand._array.map((card, index) => {\n                    const id_btn = `eachHandButton${ index }`;\n                    const id_img = `eachHandImage${ index }`;\n                    const hand_src = `../images/${ card.filename }`;\n                    const handButton = (\n                        <p className='eachHandButton' id={ id_btn } type='button' key={ index }>\n                            <img className='eachHandImage' id={ id_img } src={ hand_src } alt={ card.filename }></img>\n                        </p>\n                    );\n                    return (<Card button={ handButton } kind={ 'Hand' }/>);\n                })\n            );\n        };\n        /**\n         * 手札の更新\n         * @param {Player} player プレイヤー\n         */\n        const update_hand = (player) => {\n            setShowHand(true);\n            setHandButtons(\n                player.hand._array.map((card, index) => {\n                    const id_btn = `eachHandButton${ index }`;\n                    const id_img = `eachHandImage${ index }`;\n                    const hand_src = `../images/${ card.filename }`;\n                    const handButton = (\n                        <p className='eachHandButton' id={ id_btn } type='button' key={ index }>\n                            <img className='eachHandImage' id={ id_img } src={ hand_src } alt={ card.filename }></img>\n                        </p>\n                    );\n                    return (<Card button={ handButton } kind={ 'Hand' }/>);\n                })\n            );\n        };\n\n\n        /** サーバーからのemitを受け取るイベントハンドラ一覧 */\n        props.socket.on('update_hand', (data) => update_hand(data.player));\n        props.socket.on('hand_selection', (data) => draw_card(data));\n        props.socket.on('confirm_story_selection', (data) => update_hand(data.player));\n        props.socket.on('others_hand_selection', (data) => others_hand_selection(data));\n        props.socket.on('field_selection', (data) => update_hand(data.player));\n        props.socket.on('show_answer', (data) => update_hand(data.player));\n        props.socket.on('result', (data) => update_hand(data.player));\n        props.socket.on('restart', () => setShowHand(false));\n        props.socket.on('room', () => setShowHand(false));\n        props.socket.on('in_room', () => setShowHand(false));\n\n    }, [ props.socket ]);\n\n    return (\n        <div className=\"hand-wrapper\" style={ { display: showhand ? 'block' : 'none' } }>\n            <div>Your cards</div>\n            <div className=\"hand-content\">\n                <div id=\"hand\">{ hand_buttons }</div>\n            </div>\n        </div>\n    );\n}","import React, { useState, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport Card from '../../card';\nimport $ from 'jquery';\nimport '../../../css/story_modal.css';\n\n/** 空白のみの正規表現 */\nconst REGEX = /( |　)+/g;\n/** ボタンの効果音 */\nconst audio = new Audio(\"../audio/draw.mp3\");\n/** ボタンの効果音の音量 */\naudio.volume = 0.3;\n\n/**\n * お題の入力フォームモーダル\n * @param {{ socket: SocketIO.Socket, setStory: (sotry: string) => void, masterIndex: number }} props 連想配列として，socket, setStory, masterIndexをもつ\n */\nexport default function StoryModal(props) {\n    /** お題フォーム */\n    const { register, handleSubmit, reset } = useForm();\n    /** お題入力のエラーメッセージ */\n    const [showErrMsg, setShowErrMsg] = useState(false);\n\n    useEffect(() => {\n        // モーダルの表示の中心をbodyではなく.game-coreに変更\n        $('#exampleModalCenter').on('shown.bs.modal', () => {\n            $('body').removeClass('modal-open');\n            $('.game-core').addClass('modal-open');\n        });\n        $('#exampleModalCenter').on('hidden.bs.modal', () => {\n            setShowErrMsg(false);\n            console.log('お題のモーダル閉じました');\n            $('.game-core').removeClass('modal-open');\n        });\n\n        /** サーバーからのemitを受け取るイベントハンドラ登録一覧 */\n        props.socket.on('others_hand_selection', (data) => props.setStory(data.game.story));\n        props.socket.on('field_selection', (data) => props.setStory(data.game.story));\n        props.socket.on('show_answer', (data) => props.setStory(data.game.story));\n        props.socket.on('result', (data) => props.setStory(data.game.story));\n        props.socket.on('confirm_story_selection', (data) => animate(data))\n\n    }, [ props.socket ]);\n\n    /**\n     * お題のフォーム送信ボタンを押したときの動作\n     * @param {{ story: string }} data 連想配列として，sotryをもつ\n     * @param {Event} event イベント\n     */\n    const onSubmit = (data, event) => {\n        // 空白のみの入力は無効\n        // if (data.story.match(REGEX) != null) {\n        //     setShowErrMsg(true);\n        //     reset();\n        //     return;\n        // }\n        setShowErrMsg(false);\n        $('#exampleModalCenter').modal('toggle');\n        props.socket.emit('confirm_story_selection', { story : data.story, masterIndex : props.masterIndex });\n        event.preventDefault();\n        reset();\n    };\n\n    const animate = (data) => {\n        props.setStory(data.story);\n        const card_x = $(`#eachHandButton${ data.masterIndex }`).offset().left;\n        const field_x = ($(`#eachHandButton${ 2 }`).offset().left + $(`#eachHandButton${ 3 }`).offset().left) / 2;\n        const move_y = - $(\".game-core-wrapper\").height() / 3;\n        $(\".toField\").removeClass(\"toField\");\n        $(`#eachHandButton${ data.masterIndex }`).addClass(\"toField\");\n        document.getElementsByClassName(\"toField\")[0].animate([\n            // keyframes\n            { transform: 'translateY(0px)'}, \n            { transform: `translate(${ field_x - card_x }px, ${ move_y }px)`, opacity: 0 },\n        ], { \n            // timing options\n            duration: 800\n        });\n        // audio.play() // 再生\n        setTimeout(\n            () => props.socket.emit('story_selection', { story : data.story, masterIndex : data.masterIndex }), // サーバーに'story_selection'を送信\n            800\n        )\n    }\n\n    return(\n        <div className=\"modal fade\" id=\"exampleModalCenter\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalCenterTitle\" aria-hidden=\"true\">\n            <div className=\"modal-dialog modal-dialog-centered\" role=\"document\">\n                <div className=\"modal-content\">\n                    <div className=\"modal-header\">\n                        <h5 className=\"modal-title\" id=\"exampleModalCenterTitle\">Give us your story</h5>\n                        <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                        <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                    </div>\n                        <div className=\"modal-body\">\n                            <Card button={ props.src } kind={ 'selected' }/>\n                            <form className=\"form-group\" id=\"masterForm\" onSubmit={ handleSubmit(onSubmit) }>\n                                <span className=\"invalid-feedback\" style={ {display: showErrMsg ? 'inline' : 'none'} }>The story you entered is inappropriate</span>\n                                <label htmlFor=\"claim\"></label>\n                                <input type=\"text\" className=\"form-control\" id=\"masterClaim\" name=\"story\" ref={ register() } placeholder=\"Your story\" required/>\n                            </form>\n                        </div>\n                        <div className=\"modal-footer\">\n                            <button type=\"submit\" className=\"btn btn-primary m-auto\" form=\"masterForm\">Send</button>\n                        </div>\n                </div>\n            </div>\n        </div>\n    );\n}","// field_selectionステージ\n\nimport React, { useEffect, useState } from 'react';\nimport '../../css/field_selection.css';\nimport Card from '../card';\n\n/** ボタンの効果音 */\nconst audio = new Audio('../audio/decision29low.wav');\n/** ボタンの効果音の音量 */\naudio.volume = 0.1;\n\n/**\n * フィールドの表示，更新\n * @param {{ socket: SocketIO.Socket, setMessage: (message: string) => void }} props 連想配列として，player, setMassageをもつ\n */\nexport default function FieldSelection(props) {\n\n    /** フィールドを表示するか否か */\n    const [showfield, setShowField] = useState(true);\n    /** フィールド決定ボタン表示するか否か */\n    const [showButton, setShowButton] = useState(false);\n    /** フィールドの表示内容 */\n    const [field_buttons, setFieldButtons] = useState(null);\n    /** フィールドのラッパーの表示内容 */\n    const [showfieldWrapper, setShowfieldWrapper] = useState(false);\n\n    useEffect(() => {\n        /** 初期化 */\n        const initialize = () => {\n            setTimeout(() => {\n                setShowField(false);\n            }, 1000);\n            setShowfieldWrapper(true);\n        };\n        /**\n         * フィールドの表示\n         * @param {{ game: Game, player: Player }} data 連想配列として，game, playerをもつ\n         */\n        const field_selection = (data) => {\n            setShowfieldWrapper(true);\n            setFieldButtons(\n                data.game.field.cards.map((card, index) => {\n                    const id_btn = `eachFieldButton${ index }`;\n                    const id_img = `eachFieldImage${ index }`;\n                    const field_src = `../images/${ card.filename }`;\n                    const fieldRadio = <input className=\"eachFieldRadio\" name=\"field-cb\" id={ `cb${ id_btn }` } type=\"radio\" value={id_btn}></input>;\n                    const fieldButton = card.player === props.socket.id ? (\n                        <p className='eachFieldButton' id={ id_btn } type='button' key={ index }>\n                            <img className='eachFieldImage' id={ id_img } src={ field_src } alt={ card.filename }></img>\n                        </p>\n                    ) : (\n                        <p className='eachFieldButton' id={ id_btn } type='button' onClick={ () => selected(data, index, id_btn, field_src) }>\n                            <img className='eachFieldImage' id={ id_img } src={ field_src } alt={ card.filename }></img>\n                        </p>\n                    );\n                    return (<Card radio={ fieldRadio } button={ fieldButton } kind={ 'Field' }/>);\n                })\n            );\n            if (!data.player.isMaster) { // 語り部以外のプレイヤーの場合\n                props.setMessage('あなたは子です(ﾟ∀ﾟ)親が出したと思うカードを選択してください(=^▽^)σ');\n            } else { // 語り部の場合\n                props.setMessage('あなたは親です(ﾟ∀ﾟ)子の選択を待ちましょう( ´Д`)y━･~~');\n                props.socket.emit('wait');\n            }\n        };\n        const selected = (data, index, id_btn) => {\n            others_field_select(props.socket, data, index);\n            document.getElementById(`cb${ id_btn }`).checked = !document.getElementById(`cb${ id_btn }`).checked;\n        };\n        /**\n         * 語り部以外のプレイヤーがフィールド上のカードを選んだときの動作\n         * @param {SocketIO.Socket} socket socket\n         * @param {{ player: Player }} data 連想配列として，playerをもつ\n         * @param {number} index \n         */\n        const others_field_select = (socket, data, index) => {\n            if (!data.player.isMaster) { // 語り部ではない\n                props.setMessage('あなたは子です(ﾟ∀ﾟ)他の子の選択を待ちましょう( ´Д`)y━･~~');\n                socket.emit('field_selection', { index : index });\n                setShowButton(true);\n            }\n        };\n        /** フィールドの表示リセット */\n        const field_reset = () => {\n            setShowField(false);\n            setShowfieldWrapper(false);\n        };\n        /**\n         * フィールド上のカードを裏向きの状態で更新\n         * @param {Game} game ゲーム\n         */\n        const update_field_with_back = (game) => {\n            setShowField(true);\n            setShowfieldWrapper(true);\n            setFieldButtons(\n                game.field.cards.map((card, index) => {\n                    const id_btn = `eachFieldButton${ index }`;\n                    const id_img = `eachFieldImage${ index }`;\n                    const field_src = `../images/back/${ card.tailfilename }`;\n                    const fieldButton = (\n                        <p className='eachFieldButton' id={ id_btn } type='button' key={ index }>\n                            <img className='eachFieldImage' id={ id_img } src={ field_src } alt={ card.filename }></img>\n                        </p>\n                    );\n                    return (<Card button={ fieldButton } kind={ 'Field' }/>);\n                })\n            );\n        };\n        /**\n         * フィールド上のカードを表向きの状態で更新\n         * @param {Game} game ゲーム\n         */\n        const update_field_with_front = (game) => {\n            setShowField(true);\n            setShowfieldWrapper(true);\n            setFieldButtons(\n                game.field.cards.map((card, index) => {\n                    const id_btn = `eachFieldButton${ index }`;\n                    const id_img = `eachFieldImage${ index }`;\n                    const field_src = `../images/${ card.filename }`;\n                    const fieldButton = (\n                        <p className='eachFieldButton' id={ id_btn } type='button' key={ index }>\n                            <img className='eachFieldImage' id={ id_img } src={ field_src } alt={ card.filename }></img>\n                        </p>\n                    );\n                    return (<Card button={ fieldButton } kind={ 'Field' }/>);\n                })\n            );\n        };\n\n        /** サーバーからのemitを受け取るイベントハンドラ登録一覧 */\n        props.socket.on('in_room', () => setShowfieldWrapper(false));\n        props.socket.on('hand_selection', () => initialize());\n        props.socket.on('others_hand_selection', (data) => update_field_with_back(data.game));\n        props.socket.on('field_selection', (data) => field_selection(data));\n        props.socket.on('update_field_with_back', (data) => update_field_with_back(data.game));\n        props.socket.on('show_answer', (data) => update_field_with_front(data.game));\n        props.socket.on('result', () => field_reset());\n\n    }, [ props.socket ]);\n\n    const handleclick = () => {\n        // audio.play();\n        props.socket.emit('confirm_field_selection');\n        setShowButton(false);\n    }\n\n    return (\n        <div className='field-wrapper' style={ { display: showfieldWrapper ? 'block' : 'none' } }>\n            <div style={ { display: showfield ? 'inline-flex' : 'none' } }>Guess the card</div>\n            <div id=\"field\" style={ { display: showfield ? 'inline-flex' : 'none' } }>{ field_buttons }</div>\n            <button onClick={ handleclick } type=\"button\" className=\"btn btn-warning fieldSelectButton\" style={ { display: showButton ? 'block' : 'none' } }>Select this one</button>\n        </div>\n    );\n}","import React, { useEffect, useState } from 'react';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faLongArrowAltRight } from '@fortawesome/free-solid-svg-icons';\nimport $ from 'jquery';\nimport Card from '../../card';\nimport '../../../css/show_answer.css';\n\n/** ボタンの効果音 */\nconst audio = new Audio('../audio/decision29low.wav');\n/** ボタンの効果音の音量 */\naudio.volume = 0.1;\n/** プレイヤーの色 */\nconst playerColors = [ \n    { 'background-color': '#2ed573' }, \n    { 'background-color': '#00BFFF' }, \n    { 'background-color': '#ffa502' }, \n    { 'background-color': '#ff3838' }, \n    { 'background-color': '#ff6348' },\n    { 'background-color': '#a55eea' }\n];\n\n/**\n * 投票結果とスコア変化(show_answer)のモーダルの表示\n * @param {{ socket: SocketIO.Socket }} props 連想配列として，socketをもつ\n */\nexport default function ShowAnswer(props) {\n    /** モーダルのタイトル */\n    const [message, setMessage] = useState(null);\n    /** 全プレイヤーのスコア変化 */\n    const [scoreDiffs, setScoreDiffs] = useState(null);\n    /** フィールドの表示 */\n    const [fieldCards, setFieldCards] = useState(false);\n    /** フィールドを選んだプレイヤーの表示内容 */\n    const [selectedNames, setSelectedNames] = useState(null);\n    /** フィールドを選んだプレイヤーの表示内容 */\n    const [ownerNames, setOwnerNames] = useState(null);\n    /** フィールドを選んだプレイヤーの表示の最大値 */\n    const [maxHeight, setMaxHeight] = useState(null);\n\n\n    useEffect(() => {\n        /** アイコンのスタイル */\n        const iconStyle =  { 'margin-right': 20,'margin-left': 20 };\n\n        // モーダルの表示の中心をbodyではなく.game-coreに変更\n        $('#answerModal').on('shown.bs.modal', () => {\n            $('body').removeClass('modal-open');\n            $('.game-core').addClass('modal-open');\n        });\n        $('#answerModal').on('hidden.bs.modal', () => {\n            // audio.play();\n            console.log('答えのモーダル閉じました');\n            $('.game-core').removeClass('modal-open');\n            props.socket.emit('confirm_answer');\n        });\n\n        /**\n         * モーダルの表示\n         * @param {{ game: Game, player: Player }} data 連想配列として，game, playerをもつ\n         */\n        const open_modal = (data) => {\n            // スコア変化の表示セット\n            setScoreDiffs(\n                data.game.players.sort((a, b) => { // 降順ソート\n                    if( a.score > b.score ) return -1;\n                    if( a.score < b.score ) return 1;\n                    return 0;\n                }).map((player, index) => {\n                    var id_score_diff = 'eachScoreDiff' + index;\n                    return(\n                        <div className='eachScoreDiff' id={ id_score_diff } key={ index }>\n                            <span className=\"score-diff-name\" style={ playerColors[data.game.players.indexOf(player)] }>{ player.name }</span>\n                            <span>{ player.prescore }</span>\n                            <FontAwesomeIcon className=\"role-figure\" style={ iconStyle }  icon={ faLongArrowAltRight }/>\n                            <span>{ player.score }</span>\n                        </div>\n                    );\n                })\n            );\n            // フィールド上のカードが誰のカードだったのかの表示セット\n            setOwnerNames(\n                data.game.field.cards.map((card, index) => {\n                    var id_lst = 'eachOwnerNames' + index;\n                    const name = data.game.players.filter(player => \n                            player.socketId === card.player\n                    ).map((player, indexplayer) => {\n                        const id = \"eachName\" + index + \"player\" + indexplayer;\n                        const eachName = <div className={player.isMaster ? \"eachOwnerName master\" : \"eachOwnerName\"} style={ playerColors[data.game.players.indexOf(player)] } id={ id }>{ player.name }</div>;\n                        const ret = player.isMaster ? [eachName, <div className=\"eachOwnerName correct\" key={ index }>Correct</div>] : eachName;\n                        return (ret);\n                    });\n                    return (<div className=\"eachOwnerNames\" id={ id_lst }>{ name }</div>);\n                })\n            );\n            // 高さの設定\n            setMaxHeight(\n                Math.max(\n                    ...[3, \n                        ...data.game.field.cards.map(\n                            card => data.game.players.filter(player => player.socketId === card.player).length)\n                        ]\n                )\n            );\n            // 投票結果のフィールドの表示セット\n            setFieldCards(\n                data.game.field.cards.map((card, index) => {\n                    var id_btn = 'eachFieldButton' + index;\n                    var id_img = 'eachFieldImage' + index;\n                    var field_src = \"../images/\" + card.filename;\n                    const fieldButton = (\n                        <p className='eachSelectedFieldButton' id={ id_btn } key={ index }>\n                            <img className='eachSelectedFieldImage' id={ id_img } src={ field_src } alt={ card.filename }></img>\n                        </p>\n                    );\n                    return (<Card button={ fieldButton } kind={ 'answer' } isMaster={ index === data.game.field.masterCardIndex ? true : false }/>);\n                })\n            );\n            // 投票結果の表示セット\n            setSelectedNames(\n                data.game.field.cards.map((card, index) => {\n                    var id_lst = 'eachSelectedNames' + index;\n                    const names = data.game.players.filter(player => \n                        data.game.answers.filter(element => element.cardIndex === index).some(element => element.id === player.socketId)\n                    ).map((player, indexplayer) => {\n                        const id = \"eachName\" + index + \"player\" + indexplayer;\n                        return (<div className=\"eachName\" id={ id } key={ indexplayer } style={ playerColors[data.game.players.indexOf(player)] }>{ player.name }</div>);\n                    });\n                    return (<div className=\"eachSelectedNames\" id={ id_lst } key={ index }>{ names }</div>);\n                })\n            );\n            setMessage( data.player.score - data.player.prescore === 0 ? 'Sorry!' : 'You did it!' );\n            if(data.player.state === 'undone'){\n                $('#answerModal').modal('toggle');\n            }\n        };\n\n        /** サーバからのemitされたときのイベントハンドラ一覧 */\n        props.socket.on('show_answer', (data) => open_modal(data));\n        props.socket.on('in_room', () => {\n            if ($('#answerModal').is(':visible')) {\n                $('#answerModal').modal('toggle');\n            }\n        });\n\n    }, [ props.socket ]);\n\n    /** モーダルを閉じるボタンをクリックしたときのハンドラ */\n    const handleclick = () => {\n        $('#answerModal').modal('toggle');\n    };\n\n    return (\n        <div className=\"modal fade\" id=\"answerModal\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"answerModalTitle\" aria-hidden=\"true\">\n            <div className=\"modal-dialog modal-dialog-centered\" role=\"document\">\n                <div className=\"modal-content\">\n                    <div className=\"modal-header\">\n                        <h5 className=\"modal-title\" id=\"answerModalTitle\">Result</h5>\n                        <button type=\"button\" className=\"close\" onClick={ handleclick } aria-label=\"Close\">\n                        <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                    </div>\n                    <div className=\"modal-body\">\n                        <div className='answer-wrapper' id=\"answer\">\n                            { message }\n                            <div className=\"show-answer-selected-cards\">\n                                <div className=\"field-result-wrapper\">\n                                    <p></p>\n                                    <div id=\"owner-field\" style={ { 'height': `${ maxHeight * 10 }px` } }>{ ownerNames }</div>\n                                    <div className=\"field-cards-result\">{ fieldCards }</div>\n                                    <div id=\"selected-field\">{ selectedNames }</div>\n                                </div>\n                            </div>\n                            <div className=\"score-diff\">\n                                { scoreDiffs }\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"modal-footer\">\n                        <button id=\"backButton\" onClick={ handleclick } type=\"button\" className=\"btn btn-warning m-auto\">OK</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}","import React, { useEffect, useState } from 'react';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faChessPawn, faChessRook } from \"@fortawesome/free-solid-svg-icons\";\nimport '../../css/show_role.css';\n\n/**\n * 役割(語り部か聞き手)の表示\n * @param {{ socket: SocketIO.Socket }} props 連想配列として，socketをもつ\n */\nexport default function ShowRole(props) {\n    /** ロールを表示するか否か */\n    const [showrole, setShowRole] = useState(false);\n    /** プレイヤーのロール */\n    const [isMaster, setIsMaster] = useState(null);\n    /** アイコンのスタイル */\n    const iconStyle =  { 'width': 60, 'height': 60 };\n\n    useEffect(() => {\n        /**\n         * スコアの表示\n         * @param {{ player: Player }} data 連想配列として，playerをもつ\n         */\n        const show_role = (data) => {\n            if (data.player.isMaster) {\n                setIsMaster(true);\n            } else {\n                setIsMaster(false);\n            }\n            setShowRole(true);\n        }\n        /** スコアの表示リセット */\n        const reset_role = () => {\n            setShowRole(false);\n        }\n        /** サーバからemitされたときのイベントハンドラ一覧 */\n        props.socket.on('room', () => setShowRole(false));\n        props.socket.on('in_room', () => setShowRole(false));\n        props.socket.on('hand_selection', (data) => show_role(data));\n        props.socket.on('others_hand_selection', (data) => show_role(data));\n        props.socket.on('field_selection', (data) => show_role(data));\n        props.socket.on('show_answer', (data) => show_role(data));\n        props.socket.on('result', (data) => show_role(data));\n        props.socket.on('restart', () => reset_role());\n\n    }, [ props.socket ]);\n\n    return (\n        <div className=\"role-wrapper\" style={ { textAlign: \"center\", display: showrole ? 'block' : 'none', padding: \"50\" } } >\n            <div className=\"role-container\">\n                {/* <FontAwesomeIcon className=\"role-figure\" style={ iconStyle }  icon={ isMaster ? faChessRook : faChessPawn } color={ isMaster ? \"gold\" : \"seashell\" }/> */}\n                <span className=\"text\">{ isMaster ? \"You are the Storyteller\" : \"You are a  Listner\" }</span>\n            </div>\n        </div>\n    );\n}","import React, { useEffect, useState, useRef } from 'react';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faMedal } from '@fortawesome/free-solid-svg-icons';\nimport $ from 'jquery';\nimport '../../../css/result.css';\nimport Leave from '../../leave';\n\n/** ランキングの数字 */\nconst rank = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"];\n/** ランキングのsuffix */\nconst rank_suffix = [\"st\", \"nd\", \"rd\", \"th\", \"th\", \"th\"];\n/** アイコンのスタイル */\nconst iconStyle = [ { 'color': 'gold' }, { 'color': 'blue' }, { 'color': 'chocolate' } ];\n/** ボタンの効果音 */\nconst audio = new Audio('../audio/decision29low.wav');\n/** ボタンの効果音の音量 */\naudio.volume = 0.1;\n\n/**\n * リザルト画面の表示\n * @param {{ socket: SocketIO.Socket, setMassage: (message: string) => void }} props 連想配列として，socket, setAMassageをもつ\n */\nexport default function Result(props) {\n    /** 結果の内容 */\n    const [result, setResult] = useState(null);\n\n    const modalRef = useRef($('#resultModalWindow'));\n\n    useEffect(() => {\n        // モーダルの表示の中心をbodyではなく.game-coreに変更\n        $('#resultModalWindow').on('shown.bs.modal', () => {\n            $('body').removeClass('modal-open');\n            $('.game-core').addClass('modal-open');\n        });\n        $('#resultModalWindow').on('hidden.bs.modal', () => {\n            // audio.play();\n            $('.game-core').removeClass('modal-open');\n            console.log('リザルトモーダル閉じました');\n            props.socket.emit('restart');\n        });\n\n        /** result画面の表示 */\n        const show_result = (data) => {\n            props.setMessage('結果発表ですわぁ(⌒,_ゝ⌒)');\n            let rank_index = -1;\n            let pre_score = -1;\n            setResult(\n                data.game.players.sort((a, b) => { // 降順ソート\n                    if( a.score > b.score ) return -1;\n                    if( a.score < b.score ) return 1;\n                    return 0;\n                }).map((player, index) => {\n                    if(player.score !== pre_score){ // 同点は同じ順位にする\n                        rank_index = index;\n                    }\n                    pre_score = player.score;\n                    const id_result = 'eachResult' + rank_index;\n                    const icon = rank_index < 3 ? <FontAwesomeIcon style={ iconStyle[rank_index] }  icon={ faMedal }/> : null; \n                    return(\n                        <tr className='eachResult' id={ id_result } key={ index }>\n                            <td className=\"eachResultIcon\">{ icon }</td>\n                            <td className=\"eachResultRank\">{ rank[rank_index] }</td>\n                            <td className=\"eachResultRank\">{ rank_suffix[rank_index] }</td>\n                            <td className=\"eachResultName\">{ player.name }</td>\n                            <td className=\"eachResutScore\">{ player.score }</td>\n                        </tr>\n                    );\n                })\n            );\n            $('#resultModalWindow').modal('toggle');\n        }\n\n        // socketのインベントハンドラ登録一覧\n        props.socket.on('in_room', () => {\n            if ($('#resultModalWindow').is(':visible')) {\n                $('#resultModalWindow').modal('toggle');\n            }\n        });\n        props.socket.on('result', (data) => show_result(data));\n\n    }, [ props.socket ]);\n\n    const handleclick = () => {\n        $('#resultModalWindow').modal('toggle');\n    }\n\n    return(\n        <div className=\"modal fade\" id=\"resultModalWindow\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"resultModalTitle\" aria-hidden=\"true\">\n            <div className=\"modal-dialog modal-dialog-centered\" id=\"resultModalDialog\" role=\"document\">\n                <div className=\"modal-content result-content\">\n                    <div className=\"modal-header\">\n                        <h5 className=\"modal-title\" id=\"resultModalTitle\">結果</h5>\n                        <button type=\"button\" className=\"close\" onClick={ handleclick } aria-label=\"Close\">\n                        <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                    </div>\n                    <div className=\"modal-body\">\n                        <table id=\"result-table\">\n                            <tbody id=\"result\">\n                                <tr className='eachResult'>\n                                    <td colSpan=\"3\">順位</td>\n                                    <td>プレイヤー名</td>\n                                    <td>スコア</td>\n                                </tr>\n                                { result }\n                            </tbody>\n                        </table>\n                    </div>\n                    <div className=\"modal-footer\">\n                        <button id=\"backButton\" onClick={ handleclick } type=\"button\" className=\"btn btn-warning m-auto\">もう一度</button>\n                        <Leave socket= { props.socket } handle={ handleclick } className=\"result-leave m-auto\"/>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}","import React from 'react';\n\n/**\n * プレイヤー名の表示\n * @param {{ name: string }} props \n */\nexport default function PlayerName(props) {\n\n    return (\n        <div className=\"player-name\">\n            <div>NAME</div>\n            <p>{ props.name }</p>\n        </div>\n    );\n}","import React, { useEffect, useState } from 'react';\n\n/**\n * スコアの表示\n * @param {{ socket: SocketIO.Socket }} props 連想配列として，socketをもつ\n */\nexport default function ShowScore(props) {\n    /** プレイヤーのスコア */\n    const [score, setScore] = useState(0);\n\n    useEffect(() => {\n        /**\n         * スコアの表示\n         * @param {{ player: Player }} data 連想配列として，playerをもつ\n         */\n        const show_score = (data) => {\n            setScore(data.player.score);\n        }\n        /** サーバからemitされたときのイベントハンドラ一覧 */\n        props.socket.on('in_room', () => setScore(0));\n        props.socket.on('show_answer', (data) => show_score(data));\n        props.socket.on('restart', () => setScore(0));\n\n    }, [ props.socket ]);\n\n    return (\n        <div id=\"score\">\n            <div>SCORE</div>\n            <div>{ score }</div>\n        </div>\n    );\n}","import React, { useEffect } from 'react';\nimport PlayerName from './player_name';\nimport ShowScore from './stage/show_score';\nimport '../css/status.css';\n\n/**\n * ステータス(プレイヤー名とスコア)の表示\n * @param {{ socket: SocketIO.Socket, setShowStatus: (showStatus: boolean) => void }} props 連想配列として，socketとsetShowStatusをもつ\n */\nexport default function Status(props) {\n\n    useEffect(() => {\n        // socketのイベントハンドラ登録一覧\n        props.socket.on('room', () => props.setShowStatus(false));\n        props.socket.on('in_room', () => props.setShowStatus(true));\n        props.socket.on('overlap', () => props.setShowStatus(true));\n        props.socket.on('hand_selection', () => props.setShowStatus(true));\n        props.socket.on('others_hand_selection', () => props.setShowStatus(true));\n        props.socket.on('field_selection', () => props.setShowStatus(true));\n        props.socket.on('show_answer', () => props.setShowStatus(true));\n        props.socket.on('result', () => props.setShowStatus(true));\n        props.socket.on('restart', () => props.setShowStatus(true));\n\n    }, [ props.socket ]);\n\n    return (\n        <div className=\"player-status\" style={ {display: props.showStatus ? 'none' : 'none'} }>\n            <div className=\"outer-border\">\n                <div className=\"mid-border\">\n                    <div className=\"inner-border\">\n                        {/* <img className=\"corner-decoration corner-left-top\" src=\"https://i.ibb.co/4mKvK3N/corner-decoration.jpg\"/> \n                        <img className=\"corner-decoration corner-right-top\" src=\"https://i.ibb.co/4mKvK3N/corner-decoration.jpg\"/>\n                        <img className=\"corner-decoration corner-right-bottom\" src=\"https://i.ibb.co/4mKvK3N/corner-decoration.jpg\"/>\n                        <img className=\"corner-decoration corner-left-bottom\" src=\"https://i.ibb.co/4mKvK3N/corner-decoration.jpg\"/> */}\n                        <div className=\"player-status-container\">\n                            <PlayerName name={ props.name }/>\n                            <ShowScore socket={ props.socket }/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}","import React, { useEffect, useState } from 'react';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faChessRook, faChessPawn } from \"@fortawesome/free-solid-svg-icons\";\nimport '../css/player_list.css';\n\n/**\n * プレイヤーリストの表示\n * @param {{ socket: SocketIO.Socket }} props 連想配列として，socketをもつ\n */\nexport default function PlayerList(props) {\n    /** プレイヤーリストの表示 */\n    const [showPlayerList, setShowPlayerList] = useState(true);\n    /** プレイヤーリストの内容 */\n    const [playerList, setPlayerList] = useState(null);\n\n    useEffect(() => {\n        /**\n         * プレイヤーリストの更新\n         * @param {Player[]} players プレイヤーの配列\n         */\n        const updatePlayerList = (players) => {\n            setShowPlayerList(true);\n            setPlayerList(\n                players.sort((a, b) => {\n                    if( a.score > b.score ) return -1;\n                    if( a.score < b.score ) return 1;\n                    return 0;\n                }).map((player, index) => {\n                    const ret = (player.socketId === props.socket.id) ? ( //自分かどうか\n                            <tr className=\"self-status\" key={ index }>\n                                <td className=\"status-icon\">\n                                    <div className=\"status-rank\">{ index + 1 }</div>\n                                    <FontAwesomeIcon className={ player.isMaster?\"icon-master\":\"icon-other\"} icon={ player.isMaster ? faChessRook : faChessPawn }/>\n                                </td>\n                                <td><div className=\"status-name\">{ player.name }</div></td>\n                                <td><div className=\"status-score\">{ player.score }</div></td>\n                            </tr>\n                    ) : (\n                            <tr className=\"other-status\" key={ index }>\n                                <td className=\"status-icon\">\n                                    <div className=\"status-rank\">{ index + 1 }</div>\n                                    <FontAwesomeIcon className={ player.isMaster?\"icon-master\":\"icon-other\"} icon={ player.isMaster ? faChessRook : faChessPawn }/>\n                                </td>\n                                <td><div className=\"status-name\">{ player.name }</div></td>\n                                <td><div className=\"status-score\">{ player.score }</div></td>\n                            </tr>\n                    )\n                    return(ret);\n                })\n            );\n        };\n\n        // socketのイベントハンドラ登録一覧\n        props.socket.on('update_player_list', (data) => updatePlayerList(data.game.players));\n        props.socket.on('room', () => setShowPlayerList(false));\n        props.socket.on('in_room', (data) => updatePlayerList(data.game.players));\n        props.socket.on('hand_selection', (data) => updatePlayerList(data.game.players));\n        props.socket.on('others_hand_selection', (data) => updatePlayerList(data.game.players));\n        props.socket.on('field_selection', (data) => updatePlayerList(data.game.players));\n        props.socket.on('show_answer', (data) => updatePlayerList(data.game.players));\n        props.socket.on('result', (data) => updatePlayerList(data.game.players));\n        props.socket.on('restart', (data) => updatePlayerList(data.game.players));\n\n    }, [ props.socket ]);\n\n    return (\n        <div className=\"player-list\" style={ { display: showPlayerList ? 'block' : 'none' } }>\n            <div className=\"white kck\"  style={ { display: playerList!=null ? 'block' : 'none' } } >Players</div>\n            <table className=\"table\">\n                { playerList }\n            </table>   \n        </div>\n    );\n}","import React, { useState, useEffect } from 'react';\nimport $ from 'jquery';\nimport Card from './card';\nimport '../css/stock.css';\n\n/**\n * 手札の表示\n * @param {{ socket: SocketIO.Socket }} props 連想配列として，socketをもつ\n */\nexport default function Stock(props) {\n    /** 手札の内容 */\n    const [stock, setStock] = useState(null);\n    /** 手札の表示 */\n    const [showStock, setShowStock] = useState(false);\n\n    useEffect(() => {\n        /**\n         * 山札の表示と山札から手札へのアニメーション\n         * @param {{ game: Game }} data 連想配列として，gameをもつ\n         */\n        const stock_animate = (data) => {\n            setStock(\n                data.game.stock._array.map((card, index) => {\n                    var id_btn = 'eachStockButton' + index;\n                    var id_img = 'eachStockImage' + index;\n                    var field_src = \"../images/back/\" + card.tailfilename;\n                    var rotate = Math.random() * 20 - 10;\n                    var shiftX = Math.random() * 10 - 5;\n                    var shiftY = Math.random() * 10 - 5;\n                    const style = { transform: `rotate(${rotate}deg) translate(${shiftX}px, ${shiftY}px)` };\n                    const stockButton = (\n                        <p className='eachStockButton' id={ id_btn } type='button' key={ index }>\n                            <img className='eachStockImage' id={ id_img } src={ field_src } alt={ card.filename }></img>\n                        </p>\n                    );\n                    return (<Card button={ stockButton } style={ style } kind={ 'Stock' }/>);\n                })\n            );\n            const len = data.game.stock._array.length - 1;\n            document.getElementById(`eachStockButton${len}`).style.display = 'block';\n            document.getElementById(`eachStockButton${len}`).animate([\n                // keyframes\n                { transform: 'translate(0px,0px)'}, \n                { transform: 'translate(-300px,300px)' , opacity: 0.5 }\n            ], { \n                // timing options\n                duration: 1000\n            });\n            setTimeout(() => {\n                document.getElementById(`eachStockButton${len}`).style.display = 'none';\n            }, 1000);\n        };\n        /**\n         * 墓地から山札へのアニメーション\n         * @param {{ game: Game }} data 連想配列として，gameをもつ\n         */\n        const stock_update = (data) => {\n            var card_x = $(\"#discard\").offset().left;\n            setShowStock(true);\n            if (data.game.discard._array.length === 0) {\n                const stock_x = $(\"#stock\").offset().left;\n                setTimeout(() => {\n                    Array.from(document.getElementsByClassName('eachDiscardContainer')).forEach(element => {\n                        element.animate([\n                            { opacity: 1.0, offset: 0.0 },\n                            { transform: `translate(${stock_x - card_x}px)`, display: 'none', opacity: 0, offset: 1.0 }\n                        ], { duration: 1000 });\n                    });\n                }, 1000);\n                setTimeout(() => {\n                    stock_animate(data);\n                }, 2000);\n            } else {\n                stock_animate(data);\n            }\n        };\n        /**\n         * ストックの表示\n         * @param {{ game: Game }} data 連想配列として，gameをもつ\n         */\n        const display_stock = (data) => {\n            setStock(\n                data.game.stock._array.map((card, index) => {\n                    var id_btn = 'eachStockButton' + index;\n                    var id_img = 'eachStockImage' + index;\n                    var field_src = \"../images/back/\" + card.tailfilename;\n                    var rotate = Math.random() * 20 - 10;\n                    var shiftX = Math.random() * 10 - 5;\n                    var shiftY = Math.random() * 10 - 5;\n                    const style = { transform: `rotate(${rotate}deg) translate(${shiftX}px, ${shiftY}px)` };\n                    const stockButton = (\n                        <p className='eachStockButton' id={ id_btn } type='button' key={ index }>\n                            <img className='eachStockImage' id={ id_img } src={ field_src } alt={ card.filename }></img>\n                        </p>\n                    );\n                    return (<Card button={ stockButton } style={ style } kind={ 'Stock' }/>);\n                })\n            );\n            setShowStock(true);\n        };\n\n        // socketのイベントハンドラ登録一覧\n        props.socket.on('room', () => setShowStock(false));\n        props.socket.on('in_room', () => setShowStock(false));\n        props.socket.on('hand_selection', (data) => stock_update(data));\n        props.socket.on('others_hand_selection', (data) => display_stock(data));\n        props.socket.on('field_selection', (data) => display_stock(data));\n        props.socket.on('show_answer', (data) => display_stock(data));\n        props.socket.on('result' , (data) => display_stock(data));\n        props.socket.on('restart', () => setShowStock(false));\n\n    }, [ props.socket ]);\n\n    return (\n        <div id=\"stock\" style={ { display: showStock ? 'inline-flex' : 'none' } }>{ stock }</div>\n    );\n}","import React, { useState, useEffect } from 'react';\nimport $ from 'jquery';\nimport Card from './card';\nimport '../css/discard.css';\n\n/**\n * 墓地の表示\n * @param {{ socket: SocketIO.Socket }} props 連想配列として，socketをもつ\n */\nexport default function Discard(props) {\n\n    /** 墓地の内容 */\n    const [discard, setDiscard] = useState(null);\n    /** 墓地の表示 */\n    const [showDiscard, setShowDiscard] = useState(false);\n\n    useEffect(() => {\n        /**\n         * 墓地の更新\n         * @param {{ game: Game }} data 連想配列として，gameをもつ\n         */\n        const update_discard = (data) => {\n            setShowDiscard(true);\n            const discard_x = $(\".game-core-wrapper\").offset().left;\n            const stock_x = $(\"#stock\").offset().left;\n            Array.from(document.getElementsByClassName('eachFieldContainer')).forEach(element => {\n                var rotate = Math.random() * 20 - 10;\n                var card_x = element.getBoundingClientRect().left;\n                const animation = data.game.discard._array.length === 0 ? [\n                    { opacity: 1.0 },\n                    { transform: `translate(${discard_x - card_x}px)` },\n                    { transform: `translate(${stock_x - card_x}px) rotate(${rotate}deg)`, opacity: 0.0 }\n                ] : [\n                    { opacity: 1.0 },\n                    { transform: `translate(${discard_x - card_x}px) rotate(${rotate}deg)`, opacity: 0 }\n                ];\n                element.animate(animation, { duration: data.game.discard._array.length === 0 ? 2000 : 1000 });\n            });\n            setTimeout(() => {\n                setDiscard(\n                    data.game.discard._array.map((card, index) => {\n                        var id_btn = 'eachDiscardButton' + index;\n                        var id_img = 'eachDiscardImage' + index;\n                        var field_src = \"../images/\" + card.filename;\n                        var rotate = Math.random() * 20 - 10;\n                        var shiftX = Math.random() * 10 - 5;\n                        var shiftY = Math.random() * 10 - 5;\n                        const style = { transform: `rotate(${rotate}deg) translate(${shiftX}px, ${shiftY}px)` };\n                        const discardButton = (\n                            <p className='eachDiscardButton' id={ id_btn } type='button' key={ index }>\n                                <img className='eachDiscardImage' id={ id_img } src={ field_src } alt={ card.filename }></img>\n                            </p>\n                        );\n                        return (<Card button={ discardButton } style={ style } kind={ \"Discard\" }/>)\n                    })\n                )\n            }, data.game.discard._array.length === 0 ? 2000 : 1000);\n        };\n        /**\n         * 墓地の表示\n         * @param {{ game: Game }} data 連想配列として，gameをもつ\n         */\n        const show_discard = (data) => {\n            setShowDiscard(true);\n            setTimeout(() => {\n                setDiscard(\n                    data.game.discard._array.map((card, index) => {\n                        var id_btn = 'eachDiscardButton' + index;\n                        var id_img = 'eachDiscardImage' + index;\n                        var field_src = \"../images/\" + card.filename;\n                        var rotate = Math.random() * 20 - 10;\n                        var shiftX = Math.random() * 10 - 5;\n                        var shiftY = Math.random() * 10 - 5;\n                        const style = { transform: `rotate(${rotate}deg) translate(${shiftX}px, ${shiftY}px)` };\n                        const discardButton = (\n                            <p className='eachDiscardButton' id={ id_btn } type='button' key={ index }>\n                                <img className='eachDiscardImage' id={ id_img } src={ field_src } alt={ card.filename }></img>\n                            </p>\n                        );\n                        return (<Card button={ discardButton } style={ style } kind={ \"Discard\" }/>)\n                    })\n                )\n            }, data.game.discard._array.length === 0 ? 2000 : 1000);\n        };\n        \n        // socketのイベントハンドラ登録一覧\n        props.socket.on('room', () => setShowDiscard(false));\n        props.socket.on('hand_selection', (data) => update_discard(data));\n        props.socket.on('others_hand_selection', (data) => show_discard(data));\n        props.socket.on('field_selection', (data) => show_discard(data));\n        props.socket.on('show_answer', (data) => show_discard(data));\n        props.socket.on('restart', () => setShowDiscard(false));\n\n    }, [ props.socket ]);\n\n    return(<div id=\"discard\" className=\"discard\" style={ { display: showDiscard ? 'block' : 'none' } }>{ discard }</div>)\n}","import React, { useEffect, useState } from 'react';\nimport '../css/player_delete.css';\n\n/**\n * プレイヤー離脱メッセージの表示\n * @param {{ socket: SocketIOClient.Socket }} props 連想配列として，socketをもつ\n */\nexport default function PlayerDelete(props) {\n    /** プレイヤー離脱メッセージの表示 */\n    const [showDelete, setShowDelete] = useState(false);\n    /** プレイヤー離脱メッセージの内容 */\n    const [deleteMsg, setDeleteMsg] = useState('');\n\n    useEffect(() => {\n        const displayDelete = (data) => {\n            if (typeof data.deletedPlayer !== 'undefined') {\n                setDeleteMsg(`${ data.deletedPlayer }さんが離脱しました`);\n                setShowDelete(true);\n            }\n        }\n        /** socketのイベントハンドラ登録一覧 */\n        props.socket.on('update_player_list', (data) => displayDelete(data));\n\n    }, [ props.socket ]);\n\n    return (\n        <div className=\"deleteMsg\" onAnimationEnd={ () => setShowDelete(false) } style={ { display: showDelete ? 'block' : 'none' } }>{ deleteMsg }</div>\n    );\n}","\nimport React, { useEffect, useState } from 'react';\nimport '../css/stop.css';\n\n/**\n * 強制終了時のメッセージの表示\n * @param {{ socket: SocketIOClient.Socket }} props 連想配列として，socketをもつ\n */\nexport default function Stop(props) {\n    /** 強制終了時のメッセージの表示 */\n    const [showStop, setShowStop] = useState(false);\n    /** 強制終了時のメッセージの内容 */\n    const [stopMsg, setStopMsg] = useState('2人以下になったので，ゲームを最初からやり直します');\n\n    useEffect(() => {\n        /** socketのイベントハンドラ登録一覧 */\n        props.socket.on('in_room', (data) => {\n            if (typeof data.stopped !== 'undefined') {\n                if (data.stopped) {\n                    setTimeout(() => {\n                        setStopMsg('2人以下になったので，ゲームを最初からやり直します');\n                        setShowStop(true);\n                    }, 4000);\n                }\n            }\n        });\n\n    }, [ props.socket ]);\n\n    return (\n        <div className=\"stopMsg\" onAnimationEnd={ () => setShowStop(false) } style={ { display: showStop ? 'block' : 'none' } }>{ stopMsg }</div>\n    );\n}","import React, {useState} from 'react';\nimport { withCookies } from 'react-cookie';\nimport io from 'socket.io-client';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/js/bootstrap.min.js';\nimport $ from 'jquery';\n\nimport PlayerCounter from './scripts/playerCounter';\nimport Chat from './scripts/chat';\nimport Story from './scripts/story';\nimport Entry from './scripts/stage/entry';\nimport Room from './scripts/stage/room';\nimport Start from './scripts/stage/start';\nimport HandSelection from './scripts/stage/hand_selection';\nimport StoryModal from './scripts/stage/modal/story_modal';\nimport FieldSelection from './scripts/stage/field_selection';\nimport ShowAnswer from './scripts/stage/modal/show_answer';\nimport ShowRole from './scripts/stage/show_role';\nimport Result from './scripts/stage/modal/result';\nimport Upload from './scripts/upload';\nimport Status from './scripts/status';\nimport PlayerList from './scripts/player_list';\nimport Stock from './scripts/stock'\nimport Help from './scripts/help';\nimport Discard from './scripts/discard';\nimport PlayerDelete from './scripts/player_delete';\nimport Stop from './scripts/stop';\n// スタイルシート\nimport './App.css';\nimport './css/game.css';\n\n\n//const ENDPOINT = \"http://34.83.112.24:3000/\";\nconst ENDPOINT = \"localhost:3000\";\n// const ENDPOINT = \"//dixin.herokuapp.com\";\n\nconst socket = io(ENDPOINT, {\n  query: { 'client-id': cookieVal('client-id') }, // クライアントID(プレイヤー名を保持するためのもの)\n  transports: ['websocket'],\n  upgrade: false,\n  timeout: 1800000 // タイムアウト時間を30分に(デフォルトは20秒)\n});\n\n// jQuery全体のイベントハンドラ\n$(() => $('[data-toggle=\"tooltip\"]').tooltip());\n// 接続関係のログ(デバッグ用)\nsocket.on('connect_timeout', () => console.log('timeout'));\nsocket.on('reconnect', (num) => console.log('reconnect: ' + num));\nsocket.on('reconnect_attempt', (num) => console.log('reconnect_attempt: ' + num));\nsocket.on('reconnecting', (num) => console.log('reconnecting: ' + num));\nsocket.on('reconnect_error', (error) => console.log('reconnect_error: ' + error));\nsocket.on('reconnect_failed', () => console.log('reconnect_failed'));\nsocket.on('connect_error', (error) => console.log('connect_error: ' + error));\n\nfunction App() {\n  /** help */\n  const [message, setMessage] = useState('ようこそ！');\n  /** お題の内容 */\n  const [story, setStory] = useState('');\n  /** プレイヤー名 */\n  const [name, setName] = useState(null);\n  /** 語り部が選んだカードの手札上のインデックス */\n  const [masterIndex, setMasterIndex] = useState(null);\n  /** 手札から選ばれたカードのソース */\n  const [src, setSrc] = useState(null);\n  /** ステータス(プレイヤー名とスコア)の表示 */\n  const [showStatus, setShowStatus] = useState(false);\n\n  return (\n    <div className=\"container-outer\">\n      <div className='header'>\n        <h1>Loquor</h1>\n      </div>\n      <div className=\"game-container\">\n        <div className='game-core-wrapper'>\n          <div className='game-core'>\n            {/* <Help message={ message }/> */}\n            <Entry socket={ socket } setMessage={ setMessage } setName={ setName } setShowStatus={ setShowStatus }/>\n            <Room socket={ socket } setMessage={ setMessage } setName={ setName } setShowStatus={ setShowStatus }/>\n            {/* <Upload socket={ socket }/> */}\n            <Start socket={ socket } setMessage={ setMessage }/>\n            <Story socket={ socket } story={ story }/>\n            <HandSelection socket={ socket } setMessage={ setMessage } setMasterIndex={ setMasterIndex } setSrc={ setSrc }/>\n            <StoryModal socket={ socket } setStory={ setStory } masterIndex={ masterIndex } src={ src }/>\n            <FieldSelection socket={ socket } setMessage={ setMessage }/>\n            <ShowAnswer socket={ socket } setMessage={ setMessage } setDiscard/>\n            <Result socket={ socket } setMessage={ setMessage }/>\n            <Status socket={ socket } name={ name } showStatus={ showStatus } setShowStatus={ setShowStatus }/>\n            <PlayerList socket={ socket } name={ name }/>\n            <ShowRole socket={ socket } setMessage={ setMessage } />\n            <Discard socket={ socket }/>\n            <Stock socket={ socket }/>\n            <PlayerDelete socket={ socket }/>\n            <Stop socket={ socket }/>\n          </div>\n        </div>\n        <div className=\"game-chat\">\n          <PlayerCounter socket={ socket }/>\n          {/* <Chat socket={ socket }/> */}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n/**\n * cookieの取得\n * @param {string} key cookieのキー名\n */\nfunction cookieVal(key) {\n  return ((document.cookie + ';').match(key + '=([^¥S;]*)')||[])[1];\n}\n\nexport default withCookies(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}